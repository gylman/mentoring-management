[{"/root/cuop_internship_v_2/mentoring-management/frontend/src/index.js":"1","/root/cuop_internship_v_2/mentoring-management/frontend/src/App.js":"2","/root/cuop_internship_v_2/mentoring-management/frontend/src/Landing.js":"3","/root/cuop_internship_v_2/mentoring-management/frontend/src/Dashboard.js":"4","/root/cuop_internship_v_2/mentoring-management/frontend/src/context/authContext.js":"5","/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/server-details/ServerDetails.js":"6","/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/status/Status.js":"7","/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/SignIn.js":"8","/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/user-management/UserManagement.js":"9","/root/cuop_internship_v_2/mentoring-management/frontend/src/components/NavigationPanel.js":"10","/root/cuop_internship_v_2/mentoring-management/frontend/src/components/RegisterUserDialog.js":"11","/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/user-management/UsersTable.js":"12","/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/status/StatusTable.js":"13","/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/server-details/ServerDetailsTable.js":"14","/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/user-register/UserRegister.js":"15","/root/cuop_internship_v_2/mentoring-management/frontend/src/components/dialogs/DivisionDialog.js":"16","/root/cuop_internship_v_2/mentoring-management/frontend/src/components/dialogs/SimpleConfirmDialog.js":"17"},{"size":248,"mtime":1611634803588,"results":"18","hashOfConfig":"19"},{"size":2120,"mtime":1611636579181,"results":"20","hashOfConfig":"19"},{"size":390,"mtime":1611634803592,"results":"21","hashOfConfig":"19"},{"size":1372,"mtime":1611634803580,"results":"22","hashOfConfig":"19"},{"size":219,"mtime":1611634803600,"results":"23","hashOfConfig":"19"},{"size":969,"mtime":1611634803680,"results":"24","hashOfConfig":"19"},{"size":1438,"mtime":1611634803680,"results":"25","hashOfConfig":"19"},{"size":5727,"mtime":1611635858364,"results":"26","hashOfConfig":"19"},{"size":5546,"mtime":1611635858440,"results":"27","hashOfConfig":"19"},{"size":4829,"mtime":1611634803636,"results":"28","hashOfConfig":"19"},{"size":3509,"mtime":1611634803608,"results":"29","hashOfConfig":"19"},{"size":4457,"mtime":1611634803700,"results":"30","hashOfConfig":"19"},{"size":4386,"mtime":1611634803680,"results":"31","hashOfConfig":"19"},{"size":2090,"mtime":1611634803680,"results":"32","hashOfConfig":"19"},{"size":9481,"mtime":1611635858440,"results":"33","hashOfConfig":"19"},{"size":5325,"mtime":1611635858448,"results":"34","hashOfConfig":"19"},{"size":1296,"mtime":1611634803648,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"793642",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/root/cuop_internship_v_2/mentoring-management/frontend/src/index.js",[],["77","78"],"/root/cuop_internship_v_2/mentoring-management/frontend/src/App.js",[],"/root/cuop_internship_v_2/mentoring-management/frontend/src/Landing.js",[],"/root/cuop_internship_v_2/mentoring-management/frontend/src/Dashboard.js",[],"/root/cuop_internship_v_2/mentoring-management/frontend/src/context/authContext.js",[],"/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/server-details/ServerDetails.js",["79"],"import React from \"react\";\r\nimport ServerDetailsTable from \"./ServerDetailsTable\";\r\nimport cuid from \"cuid\";\r\n\r\nfunction ServerDetails() {\r\n  const tableHeaders = [\r\n    { columnHeader: \"Room ID\" },\r\n    { columnHeader: \"Start time\" },\r\n    { columnHeader: \"Number of users\" },\r\n  ];\r\n\r\n  const [dummyData, setDummyData] = React.useState([\r\n    { roomID: \"592\", startTime: \"592651139\", numOfUsers: 1, id: cuid() },\r\n    { roomID: \"592\", startTime: \"592651138\", numOfUsers: 1, id: cuid() },\r\n    { roomID: \"592\", startTime: \"592651137\", numOfUsers: 1, id: cuid() },\r\n    { roomID: \"592\", startTime: \"592651136\", numOfUsers: 1, id: cuid() },\r\n    { roomID: \"592\", startTime: \"592651135\", numOfUsers: 1, id: cuid() },\r\n    { roomID: \"592\", startTime: \"592651134\", numOfUsers: 1, id: cuid() },\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <h1>MCU details</h1>\r\n      <ServerDetailsTable data={dummyData} headers={tableHeaders} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ServerDetails;\r\n","/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/status/Status.js",["80"],"import { Table } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport cuid from \"cuid\";\r\nimport CustomizedTables from \"./StatusTable\";\r\n\r\nfunction Status() {\r\n  const [dummyData, setDummyData] = React.useState([\r\n    { serverName: \"CUOP1\", serverID: \"592651139\", numOfUsers: 1, id: cuid() },\r\n    { serverName: \"CUOP2\", serverID: \"592651138\", numOfUsers: 1, id: cuid() },\r\n    { serverName: \"CUOP3\", serverID: \"592651137\", numOfUsers: 1, id: cuid() },\r\n    { serverName: \"CUOP4\", serverID: \"592651136\", numOfUsers: 1, id: cuid() },\r\n    { serverName: \"CUOP5\", serverID: \"592651135\", numOfUsers: 1, id: cuid() },\r\n    { serverName: \"CUOP6\", serverID: \"592651134\", numOfUsers: 1, id: cuid() },\r\n  ]);\r\n\r\n  function updateServerName(id, newServerName) {\r\n    const updatedDummyData = dummyData.map((item) => {\r\n      if (item.id === id) {\r\n        return {\r\n          ...item,\r\n          serverName: newServerName,\r\n        };\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n\r\n    setDummyData(updatedDummyData);\r\n  }\r\n  const tableHeaders = [\r\n    { columnHeader: \"MCU name\" },\r\n    { columnHeader: \"ID\" },\r\n    { columnHeader: \"Number of users\" },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <h1>MCU  list</h1>\r\n      <CustomizedTables\r\n        data={dummyData}\r\n        headers={tableHeaders}\r\n        updateServerName={updateServerName}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\n// {data:dummyData, to: '/hhhh'}\r\n\r\nexport default Status;\r\n","/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/SignIn.js",["81","82"],"import {\r\n  Button,\r\n  CircularProgress,\r\n  Grid,\r\n  makeStyles,\r\n  Snackbar,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Logo from \"../assets/images/logo.png\";\r\nimport { AuthContext } from \"../context/authContext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  headerContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flex: 1,\r\n  },\r\n  header: {\r\n    color: \"black\",\r\n    fontSize: 35,\r\n    fontWeight: \"bold\",\r\n    color: \"#003a76\",\r\n    fontFamily: \"Open Sans Condensed\",\r\n  },\r\n  loginTitle: {\r\n    color: \"black\",\r\n    fontSize: 35,\r\n    fontWeight: \"bold\",\r\n    color: \"#003a76\",\r\n    textAlign: \"center\",\r\n    fontFamily: \"Open Sans Condensed\",\r\n  },\r\n  forgotCredentials: {\r\n    color: \"#003a76\",\r\n    textAlign: \"center\",\r\n    cursor: \"pointer\",\r\n    textDecoration: \"underline\",\r\n  },\r\n}));\r\n\r\nfunction SignIn() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [userId, setUserId] = React.useState(\"\");\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [password, setPassword] = React.useState(\"\");\r\n  const [openAlert, setOpenAlert] = React.useState(false);\r\n  const auth = useContext(AuthContext);\r\n\r\n  function handleClose() {\r\n    setOpenAlert(false);\r\n  }\r\n\r\n  async function submitLoginForm() {\r\n    if (!password.length || !userId.length) {\r\n      return setOpenAlert(true);\r\n    }\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.post(\r\n        `http://59.26.51.139:3006/api/v1/auth`,\r\n        {\r\n          userId: userId,\r\n          password: password,\r\n          // userId: \"12345678\",\r\n          // password: \"ee591301\",\r\n        }\r\n      );\r\n\r\n      if (response.data.status === \"success\") {\r\n        auth.login({\r\n          token: response.data.token,\r\n          id: response.data.user.userId,\r\n          fullName: \"Qilman\",\r\n          status: \"teacher\",\r\n        });\r\n        setLoading(false);\r\n        setUserId(\"\");\r\n        setPassword(\"\");\r\n        history.push(\"/\");\r\n      } else {\r\n      }\r\n    } catch (error) {\r\n      setLoading(false);\r\n      setOpenAlert(true);\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  // function Alert(props) {\r\n  //   return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <AppBar style={{ backgroundColor: \"white\" }} position=\"static\">\r\n        <Toolbar style={{ justifyContent: \"space-between\" }}>\r\n          <img src={Logo} alt=\"wooksung_media\" />\r\n          <Typography className={classes.header}>iMentorCenter</Typography>\r\n          <div style={{ width: \"252px\" }}></div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        justify=\"center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <Grid item container justify=\"center\">\r\n          <Grid item md={3} style={{ marginBottom: \"1em\" }}>\r\n            <Typography className={classes.loginTitle}>LOGIN</Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container justify=\"center\">\r\n          <Grid item md={3} style={{ marginBottom: \"1em\" }}>\r\n            <TextField\r\n              fullWidth\r\n              required\r\n              id=\"filled-basic\"\r\n              label=\"User ID\"\r\n              variant=\"filled\"\r\n              value={userId}\r\n              onChange={(event) => setUserId(event.target.value)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container justify=\"center\" style={{ marginBottom: \"1em\" }}>\r\n          <Grid item md={3}>\r\n            <TextField\r\n              fullWidth\r\n              required\r\n              id=\"filled-basic\"\r\n              label=\"Password\"\r\n              variant=\"filled\"\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={(event) => setPassword(event.target.value)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        {loading ? (\r\n          <Grid\r\n            style={{ minHeight: \"10vh\" }}\r\n            container\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <CircularProgress />\r\n            </Grid>\r\n          </Grid>\r\n        ) : (\r\n          <Grid item container justify=\"center\" style={{ marginBottom: \"1em\" }}>\r\n            <Grid item md={3}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                fullWidth\r\n                onClick={() => {\r\n                  // setIsUserLoggedIn(true);\r\n                  submitLoginForm();\r\n                }}\r\n              >\r\n                Sign in\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        <Grid item container justify=\"center\">\r\n          <Grid item md={3}>\r\n            <Typography className={classes.forgotCredentials}>\r\n              forgot ID / password\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Snackbar\r\n          onClose={handleClose}\r\n          open={openAlert}\r\n          message=\"Your password or user id is not correct!\"\r\n          ContentProps={{\r\n            style: {\r\n              marginTop: \"45px\",\r\n              backgroundColor: \"#FF3232\",\r\n            },\r\n          }}\r\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n          // onClose={() => setAlert({ ...alert, open: false })}\r\n          autoHideDuration={2000}\r\n        />\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SignIn;\r\n","/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/user-management/UserManagement.js",["83","84","85"],"/root/cuop_internship_v_2/mentoring-management/frontend/src/components/NavigationPanel.js",["86","87","88"],"import React, { useContext } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Logo from \"../assets/images/logo.png\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport cuid from \"cuid\";\r\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\r\nimport BuildIcon from \"@material-ui/icons/Build\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\r\nimport { AuthContext } from \"../context/authContext\";\r\nconst drawerWidth = 280;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    backgroundColor: \"white\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerContainer: {\r\n    overflow: \"auto\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n  title: {\r\n    color: \"black\",\r\n    fontSize: 35,\r\n    fontWeight: \"bold\",\r\n    color: \"#003a76\",\r\n    fontFamily: \"Open Sans Condensed\",\r\n  },\r\n  logoutContainer: {\r\n    width: \"252px\",\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n  },\r\n}));\r\n\r\nexport default function NavigationPanel({ setIsUserLoggedIn }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const auth = useContext(AuthContext);\r\n\r\n  const [activeOption, setActiveOption] = React.useState(\"\");\r\n  const status = \"administrator\";\r\n  let navigationPanelOptions;\r\n  if (status === \"instructor\") {\r\n    navigationPanelOptions = [\r\n      { name: \"Classroom registration\" },\r\n      { name: \"Usage information\" },\r\n    ];\r\n  } else if (status === \"administrator\") {\r\n    navigationPanelOptions = [\r\n      { name: \"Status\", icon: <TrendingUpIcon />, path: \"/\", id: cuid() },\r\n      {\r\n        name: \"MCU Management\",\r\n        icon: <BuildIcon />,\r\n        path: \"/mcu-management\",\r\n        id: cuid(),\r\n      },\r\n      {\r\n        name: \"User Management\",\r\n        icon: <PeopleIcon />,\r\n        path: \"/user-management\",\r\n        id: cuid(),\r\n      },\r\n      {\r\n        name: \"Statistics\",\r\n        icon: <AssessmentIcon />,\r\n        path: \"/statistics\",\r\n        id: cuid(),\r\n      },\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar style={{ justifyContent: \"space-between\" }}>\r\n          <img src={Logo} alt=\"wooksung_media\" />\r\n          <Typography className={classes.title}>iMentorCenter</Typography>\r\n          <div className={classes.logoutContainer}>\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                // setIsUserLoggedIn(false);\r\n                auth.logout();\r\n                history.push(\"/signin\");\r\n              }}\r\n            >\r\n              LogOut\r\n            </Button>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <Toolbar />\r\n        <div className={classes.drawerContainer}>\r\n          <List>\r\n            {navigationPanelOptions.map((item) => (\r\n              <ListItem\r\n                onClick={() => setActiveOption(item.path)}\r\n                selected={activeOption === item.path}\r\n                component={Link}\r\n                to={item.path}\r\n                button\r\n                key={item.id}\r\n              >\r\n                <ListItemIcon>{item.icon}</ListItemIcon>\r\n                <ListItemText primary={item.name} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n          <Divider />\r\n          <List>\r\n            {[{ name: \"Profile\", icon: <PersonIcon /> }].map((item, index) => (\r\n              <ListItem button key={cuid()}>\r\n                <ListItemIcon>{item.icon}</ListItemIcon>\r\n                <ListItemText primary={item.name} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </div>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","/root/cuop_internship_v_2/mentoring-management/frontend/src/components/RegisterUserDialog.js",[],"/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/user-management/UsersTable.js",["89"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport cuid from \"cuid\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nfunction createData(name, code, population, size) {\r\n  const density = population / size;\r\n  return { name, code, population, size, density };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"India\", \"IN\", 1324171354, 3287263),\r\n  createData(\"China\", \"CN\", 1403500365, 9596961),\r\n  createData(\"Italy\", \"IT\", 60483973, 301340),\r\n  createData(\"United States\", \"US\", 327167434, 9833520),\r\n  createData(\"Canada\", \"CA\", 37602103, 9984670),\r\n  createData(\"Australia\", \"AU\", 25475400, 7692024),\r\n  createData(\"Germany\", \"DE\", 83019200, 357578),\r\n  createData(\"Ireland\", \"IE\", 4857000, 70273),\r\n  createData(\"Mexico\", \"MX\", 126577691, 1972550),\r\n  createData(\"Japan\", \"JP\", 126317000, 377973),\r\n  createData(\"France\", \"FR\", 67022000, 640679),\r\n  createData(\"United Kingdom\", \"GB\", 67545757, 242495),\r\n  createData(\"Russia\", \"RU\", 146793744, 17098246),\r\n  createData(\"Nigeria\", \"NG\", 200962417, 923768),\r\n  createData(\"Brazil\", \"BR\", 210147125, 8515767),\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nexport default function UsersTable({ columns, rows }) {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={cuid()}\r\n                  align=\"left\"\r\n                  // style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row) => {\r\n                return (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                    {columns.map((column) => {\r\n                      const value = row[column.extractor];\r\n                      return column.extractor === \"delete\" ? (\r\n                        <TableCell>\r\n                          <IconButton\r\n                            aria-label=\"delete\"\r\n                            style={{ width: \"20px\", height: \"20px\" }}\r\n                          >\r\n                            <DeleteIcon\r\n                              style={{ width: \"20px\", height: \"20px\" }}\r\n                            />\r\n                          </IconButton>\r\n                        </TableCell>\r\n                      ) : (\r\n                        <TableCell key={column.id} align=\"left\">\r\n                          {value}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/status/StatusTable.js",[],"/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/server-details/ServerDetailsTable.js",[],"/root/cuop_internship_v_2/mentoring-management/frontend/src/pages/user-register/UserRegister.js",[],"/root/cuop_internship_v_2/mentoring-management/frontend/src/components/dialogs/DivisionDialog.js",["90"],"import React from \"react\";\r\nimport cuid from \"cuid\";\r\nimport axios from \"axios\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {\r\n  Grid,\r\n  Input,\r\n  InputAdornment,\r\n  List,\r\n  ListItem,\r\n  ListItemSecondaryAction,\r\n  ListItemText,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    width: \"fit-content\",\r\n  },\r\n  closeButton: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          className={classes.closeButton}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport default function DivisionDialog({\r\n  handleClose,\r\n  open,\r\n  divisions,\r\n  updateDivisionsInLocal,\r\n  deleteDivisionsInLocal,\r\n}) {\r\n  const [newDivsion, setNewDivision] = React.useState(\"\");\r\n\r\n  async function submitSaveDivisions() {\r\n    try {\r\n      const response = await axios.post(\r\n        `http://59.26.51.139:3006/api/v1/divisions/save`,\r\n        {\r\n          divisions: divisions.map((item) => item.name),\r\n          // userId: userId,\r\n          // password: password,\r\n          // userId: \"12345678\",\r\n          // password: \"ee591301\",\r\n        }\r\n      );\r\n\r\n      if (response.data.status === \"success\") {\r\n      } else {\r\n      }\r\n    } catch (error) {\r\n      // setOpenAlert(true);\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      aria-labelledby=\"customized-dialog-title\"\r\n      open={open}\r\n    >\r\n      <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n        Division management\r\n      </DialogTitle>\r\n      <DialogContent dividers>\r\n        <Grid\r\n          container\r\n          style={{ minWidth: \"500px\" }}\r\n          justify=\"center\"\r\n          spacing={2}\r\n          // flexDirection=\"column\"\r\n        >\r\n          <Grid item xs={12}>\r\n            {/* <TextField fullWidth variant=\"outlined\" placeholder=\"Personal id\" /> */}\r\n            <Input\r\n              id=\"rename-input\"\r\n              // type={values.showPassword ? \"text\" : \"password\"}\r\n              value={newDivsion}\r\n              onChange={(event) => setNewDivision(event.target.value)}\r\n              fullWidth\r\n              autoFocus\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    aria-label=\"toggle password visibility\"\r\n                    onClick={() => {\r\n                      if (newDivsion.trim() === \"\") {\r\n                        return;\r\n                      } else {\r\n                        updateDivisionsInLocal(newDivsion);\r\n                        setNewDivision(\"\");\r\n                      }\r\n                    }}\r\n                    // onMouseDown={handleMouseDownPassword}\r\n                  >\r\n                    <AddIcon />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <List style={{ marginTop: \"10px\", padding: 0 }}>\r\n          {divisions.map((division) => {\r\n            return (\r\n              <ListItem key={cuid()} style={{ padding: 0 }}>\r\n                <ListItemText primary={division.name} />\r\n                <ListItemSecondaryAction>\r\n                  <IconButton\r\n                    style={{ padding: 0, marginRight: \"-3px\" }}\r\n                    onClick={() => {\r\n                      deleteDivisionsInLocal(division.name);\r\n                    }}\r\n                  >\r\n                    <DeleteIcon />\r\n                  </IconButton>\r\n                </ListItemSecondaryAction>\r\n              </ListItem>\r\n            );\r\n          })}\r\n        </List>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          autoFocus\r\n          onClick={() => {\r\n            submitSaveDivisions();\r\n            handleClose();\r\n          }}\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n        >\r\n          Save\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","/root/cuop_internship_v_2/mentoring-management/frontend/src/components/dialogs/SimpleConfirmDialog.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":12,"column":21,"nodeType":"97","messageId":"98","endLine":12,"endColumn":33},{"ruleId":"95","severity":1,"message":"99","line":1,"column":10,"nodeType":"97","messageId":"98","endLine":1,"endColumn":15},{"ruleId":"100","severity":1,"message":"101","line":31,"column":5,"nodeType":"102","messageId":"103","endLine":31,"endColumn":10},{"ruleId":"100","severity":1,"message":"101","line":38,"column":5,"nodeType":"102","messageId":"103","endLine":38,"endColumn":10},{"ruleId":"95","severity":1,"message":"104","line":2,"column":8,"nodeType":"97","messageId":"98","endLine":2,"endColumn":12},{"ruleId":"95","severity":1,"message":"105","line":94,"column":9,"nodeType":"97","messageId":"98","endLine":94,"endColumn":16},{"ruleId":"95","severity":1,"message":"106","line":127,"column":13,"nodeType":"97","messageId":"98","endLine":127,"endColumn":21},{"ruleId":"95","severity":1,"message":"107","line":13,"column":8,"nodeType":"97","messageId":"98","endLine":13,"endColumn":17},{"ruleId":"95","severity":1,"message":"108","line":14,"column":8,"nodeType":"97","messageId":"98","endLine":14,"endColumn":16},{"ruleId":"100","severity":1,"message":"101","line":53,"column":5,"nodeType":"102","messageId":"103","endLine":53,"endColumn":10},{"ruleId":"95","severity":1,"message":"109","line":21,"column":7,"nodeType":"97","messageId":"98","endLine":21,"endColumn":11},{"ruleId":"95","severity":1,"message":"110","line":24,"column":3,"nodeType":"97","messageId":"98","endLine":24,"endColumn":12},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'setDummyData' is assigned a value but never used.","Identifier","unusedVar","'Table' is defined but never used.","no-dupe-keys","Duplicate key 'color'.","ObjectExpression","unexpected","'cuid' is defined but never used.","'columns' is assigned a value but never used.","'response' is assigned a value but never used.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","'rows' is assigned a value but never used.","'TextField' is defined but never used.","no-global-assign","no-unsafe-negation"]